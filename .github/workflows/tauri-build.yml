name: Tauri Build (tag + branch + manual)

on:
  push:
    branches:
      - ci/tauri-build-test
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    env:
      ROLLUP_SKIP_NODE_NATIVE: '1'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Clean lock and node_modules (non-Windows)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          rm -f package-lock.json || true
          rm -rf node_modules || true

      - name: Install dependencies
        run: npm install

      - name: Install Tauri CLI (Windows)
        if: matrix.os == 'windows-latest'
        run: npm install --no-save @tauri-apps/cli-win32-x64-msvc

      - name: Install Tauri CLI (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          ARCH=$(uname -m)
          if [ "$ARCH" = "x86_64" ]; then
            PKG=@tauri-apps/cli-darwin-x64
          else
            PKG=@tauri-apps/cli-darwin-arm64
          fi
          echo "Installing $PKG"
          npm install --no-save "$PKG"

      - name: Install Tauri CLI (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: npm install --no-save @tauri-apps/cli-linux-x64-gnu

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Tauri target
        uses: actions/cache@v4
        with:
          path: src-tauri/target
          key: ${{ runner.os }}-tauri-target-${{ hashFiles('src-tauri/Cargo.lock') }}

      - name: Setup Linux deps
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libayatana-appindicator3-dev librsvg2-dev patchelf

      - name: Build (platform-specific)
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            npm run tauri:build:exe
          else
            npm run tauri:build
          fi

      - name: Upload Windows EXE artifact only
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: BiliBili-History-Frontend.exe
          path: BiliBili-History-Frontend.exe
          if-no-files-found: error

      - name: Prepare macOS .app zip (if exists)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          set -e
          app_path=$(ls -d src-tauri/target/**/bundle/macos/*.app 2>/dev/null | head -n 1 || true)
          if [ -n "$app_path" ]; then
            echo "Zipping $app_path"
            ditto -c -k --sequesterRsrc --keepParent "$app_path" BiliBili-History-Frontend-macos.app.zip
          else
            echo "No .app found to zip"
          fi

      - name: Upload macOS artifacts (zip/.dmg if present)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macOS-artifacts
          path: |
            BiliBili-History-Frontend-macos.app.zip
            src-tauri/target/**/bundle/macos/*.dmg
          if-no-files-found: warn

      - name: Upload Linux artifacts (AppImage/deb if present)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: |
            src-tauri/target/**/bundle/appimage/*.AppImage
            src-tauri/target/**/bundle/deb/*.deb
          if-no-files-found: warn


